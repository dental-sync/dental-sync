# üöÄ Script PowerShell para Cadastrar Prot√©ticos em Massa
# Este script cadastra todos os prot√©ticos do arquivo JSON na aplica√ß√£o

param(
    [string]$BaseUrl = "http://localhost:8080",
    [string]$ProteticosFile = "test-data/proteticos-cadastro.json"
)

# Fun√ß√£o para imprimir mensagens coloridas
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Configura√ß√µes
$ResultsDir = "results/cadastro-proteticos"

Write-Host "===============================================" -ForegroundColor Cyan
Write-Host "üöÄ CADASTRO EM MASSA DE PROT√âTICOS" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

# Verificar se aplica√ß√£o est√° rodando
Write-Status "Verificando se aplica√ß√£o est√° rodando..."
try {
    $response = Invoke-WebRequest -Uri "$BaseUrl/auth/check" -Method GET -TimeoutSec 10
    if ($response.StatusCode -in @(200, 401, 403)) {
        Write-Success "Aplica√ß√£o est√° rodando"
    }
} catch {
    Write-Error "Aplica√ß√£o n√£o est√° respondendo em $BaseUrl"
    Write-Error "Certifique-se que a aplica√ß√£o est√° rodando:"
    Write-Error "  cd core && mvn spring-boot:run"
    exit 1
}

# Verificar se arquivo de prot√©ticos existe
if (-not (Test-Path $ProteticosFile)) {
    Write-Error "Arquivo n√£o encontrado: $ProteticosFile"
    exit 1
}

# Criar diret√≥rio de resultados
if (-not (Test-Path $ResultsDir)) {
    New-Item -ItemType Directory -Path $ResultsDir -Force | Out-Null
}

# Ler JSON
Write-Status "Lendo prot√©ticos do arquivo: $ProteticosFile"
$proteticos = Get-Content $ProteticosFile -Raw | ConvertFrom-Json

# Contadores
$total = $proteticos.Count
$sucesso = 0
$erro = 0

Write-Status "Processando $total prot√©ticos..."

# Processar cada prot√©tico
for ($i = 0; $i -lt $proteticos.Count; $i++) {
    $protetico = $proteticos[$i]
    $numero = $i + 1
    
    Write-Status "[$numero/$total] Cadastrando: $($protetico.nome) ($($protetico.email))"
    
    try {
        # Converter para JSON
        $json = $protetico | ConvertTo-Json -Compress
        
        # Fazer requisi√ß√£o POST
        $response = Invoke-WebRequest -Uri "$BaseUrl/proteticos" `
            -Method POST `
            -ContentType "application/json" `
            -Body $json `
            -TimeoutSec 30
        
        if ($response.StatusCode -eq 201) {
            Write-Success "‚úÖ Cadastrado: $($protetico.nome)"
            $sucesso++
            $response.Content | Out-File -FilePath "$ResultsDir/success_$numero.json" -Encoding UTF8
        }
        
    } catch {
        Write-Error "‚ùå Erro ao cadastrar: $($protetico.nome)"
        $erro++
        
        # Salvar erro
        $errorDetails = @{
            StatusCode = $_.Exception.Response.StatusCode.value__
            StatusDescription = $_.Exception.Response.StatusDescription
            ResponseBody = $_.Exception.Response | ConvertTo-Json
            Protetico = $protetico
        }
        
        $errorDetails | ConvertTo-Json | Out-File -FilePath "$ResultsDir/error_$numero.json" -Encoding UTF8
        
        # Mostrar erro espec√≠fico
        $errorMessage = $_.Exception.Message
        if ($errorMessage -match "email") {
            Write-Warning "   Poss√≠vel email duplicado"
        } elseif ($errorMessage -match "cro") {
            Write-Warning "   Poss√≠vel CRO duplicado"
        }
    }
    
    # Pequena pausa entre requisi√ß√µes
    Start-Sleep -Milliseconds 500
}

Write-Host ""
Write-Host "===============================================" -ForegroundColor Cyan
Write-Success "üéâ CADASTRO CONCLU√çDO!"
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä Estat√≠sticas:" -ForegroundColor White
Write-Host "   Total processados: $total" -ForegroundColor White
Write-Host "   Sucessos: $sucesso" -ForegroundColor Green
Write-Host "   Erros: $erro" -ForegroundColor Red
Write-Host ""
Write-Host "üìÅ Resultados salvos em: $ResultsDir/" -ForegroundColor White

if ($erro -gt 0) {
    Write-Host ""
    Write-Warning "‚ö†Ô∏è Alguns cadastros falharam. Verifique os arquivos de erro."
    Write-Warning "Poss√≠veis causas:"
    Write-Warning "  - Emails ou CROs j√° existem no banco"
    Write-Warning "  - Formato inv√°lido dos dados"
    Write-Warning "  - Valida√ß√µes do modelo n√£o atendidas"
}

Write-Host ""
Write-Status "Para testar login, use qualquer dos usu√°rios cadastrados:"
Write-Status "  Email: joao.silva@dentalsync.com"
Write-Status "  Senha: senha123"
Write-Host ""
Write-Status "Para ver todos os prot√©ticos:"
Write-Status "  Invoke-RestMethod -Uri '$BaseUrl/proteticos' -Method GET"

Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "  # Testar login via PowerShell:" -ForegroundColor Gray
Write-Host "  `$body = @{ username='joao.silva@dentalsync.com'; password='senha123'; rememberMe='false' }" -ForegroundColor Gray
Write-Host "  Invoke-RestMethod -Uri '$BaseUrl/login' -Method POST -Body `$body" -ForegroundColor Gray 